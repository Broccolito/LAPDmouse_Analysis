}
}
#Define few places within the repo
wd = get_directory()
setwd(wd)
graphics_wd = paste0(wd, "/barplots")
data_folder_heads = c("m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18")
for(data_folder_head in data_folder_heads){
getinto(data_folder_head)
f = list.files(pattern = "LobesDeposition")
data = read.csv(f)
data$label = c("left", "cranial", "middle", "caudal", "accessory")
data = data[,1:8]
total_volume = sum(data$volume)
vv_ratio = round(data$volume/total_volume,3)
total_particle = sum(data$mean * data$volume)
pp_ratio = round((data$mean * data$volume)/total_particle,3)
ratio = c(vv_ratio, pp_ratio)
#Assign the ratio values to the global env
assign(paste0(data_folder_head, "_ratio"), ratio)
# Legend = c(rep("Volume Ratio", length(vv_ratio)),rep("Particle Ratio", length(pp_ratio)))
#
# ratio_data = data.frame(data$label,ratio, Legend)
#
# ggplot(data = ratio_data, aes(x = data.label, y = ratio, fill = Legend)) +
#   geom_bar(stat="identity", color="black", position = "dodge") +
#   xlab("Lobe Label") +
#   ylab("Relative Ratio") +
#   ggtitle(paste0("Sample ", data_folder_head)) +
#   theme_minimal()
#
# setwd(graphics_wd)
# ggsave(filename = paste0(data_folder_head, ".png"), device = "png")
#
setwd(wd)
# cat(paste0("Plot for ", data_folder_head, " saved..\n"))
#
}
#All the ratios
ratio_list = ls(pattern = "_ratio")[1:18]
ratio_mat = vector()
for(ratio in ratio_list){
ratio_mat = rbind(ratio_mat, get(ratio))
}
ratio_mat = as.data.frame(ratio_mat)
vv_ratio_mat = ratio_mat[1:5]
pp_ratio_mat = ratio_mat[6:10]
kable(vv_ratio_mat)
kable(pp_ratio_mat)
ratio_names = unlist(lapply(strsplit(ratio_list, "[_]"), `[[`, 1))
rownames(vv_ratio_mat) = ratio_names
rownames(pp_ratio_mat) = ratio_names
colnames(vv_ratio_mat) = data$label
colnames(pp_ratio_mat) = data$label
kable(vv_ratio_mat)
kable(pp_ratio_mat)
graphics.off()
windows()
for(i in 1:17){
plot(as.numeric(vv_ratio_mat[i,]),
xlab = "",
ylab = "",
yaxt="n",
xaxt = "n",
type = "b",
col = rainbow(18)[i])
par(new = TRUE)
}
plot(as.numeric(vv_ratio_mat[18,]),
main = "Volume to Volume Ratio Plot",
xlab = "", ylab = "", type = "b", xaxt = "n",
col = rainbow(18)[18])
axis(1, at = 1:5, labels = data$label)
par(new = FALSE)
windows()
for(i in 1:17){
plot(as.numeric(pp_ratio_mat[i,]),
xlab = "",
ylab = "",
yaxt="n",
xaxt = "n",
type = "b",
col = rainbow(18)[i])
par(new = TRUE)
}
plot(as.numeric(pp_ratio_mat[18,]),
main = "Particle to Volume Ratio Plot",
xlab = "", ylab = "", type = "b", xaxt = "n",
col = rainbow(18)[18])
axis(1, at = 1:5, labels = data$label)
par(new = FALSE)
windows()
plot(1:18, 1:18, main = "legend color", size = 2, cex = 3, pch = 16, col = rainbow(18))
axis(1, at = 1:18, labels = seq(1,18,1))
library(ggplot2)
library(knitr)
library(dplyr)
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
getinto = function(filename){
if(!dir.exists(filename)){
print("The file is not found...")
stop("Wrong directory...")
}else{
setwd(paste(getwd(),"/",filename,sep = ""))
}
}
#Define few places within the repo
wd = get_directory()
setwd(wd)
graphics_wd = paste0(wd, "/barplots")
data_folder_heads = c("m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18")
for(data_folder_head in data_folder_heads){
getinto(data_folder_head)
f = list.files(pattern = "LobesDeposition")
data = read.csv(f)
data$label = c("left", "cranial", "middle", "caudal", "accessory")
data = data[,1:8]
total_volume = sum(data$volume)
vv_ratio = round(data$volume/total_volume,3)
total_particle = sum(data$mean * data$volume)
pp_ratio = round((data$mean * data$volume)/total_particle,3)
ratio = c(vv_ratio, pp_ratio)
#Assign the ratio values to the global env
assign(paste0(data_folder_head, "_ratio"), ratio)
# Legend = c(rep("Volume Ratio", length(vv_ratio)),rep("Particle Ratio", length(pp_ratio)))
#
# ratio_data = data.frame(data$label,ratio, Legend)
#
# ggplot(data = ratio_data, aes(x = data.label, y = ratio, fill = Legend)) +
#   geom_bar(stat="identity", color="black", position = "dodge") +
#   xlab("Lobe Label") +
#   ylab("Relative Ratio") +
#   ggtitle(paste0("Sample ", data_folder_head)) +
#   theme_minimal()
#
# setwd(graphics_wd)
# ggsave(filename = paste0(data_folder_head, ".png"), device = "png")
#
setwd(wd)
# cat(paste0("Plot for ", data_folder_head, " saved..\n"))
#
}
#All the ratios
ratio_list = ls(pattern = "_ratio")[1:18]
ratio_mat = vector()
for(ratio in ratio_list){
ratio_mat = rbind(ratio_mat, get(ratio))
}
ratio_mat = as.data.frame(ratio_mat)
vv_ratio_mat = ratio_mat[1:5]
pp_ratio_mat = ratio_mat[6:10]
kable(vv_ratio_mat)
kable(pp_ratio_mat)
ratio_names = unlist(lapply(strsplit(ratio_list, "[_]"), `[[`, 1))
rownames(vv_ratio_mat) = ratio_names
rownames(pp_ratio_mat) = ratio_names
colnames(vv_ratio_mat) = data$label
colnames(pp_ratio_mat) = data$label
kable(vv_ratio_mat)
kable(pp_ratio_mat)
graphics.off()
windows()
for(i in 1:17){
plot(as.numeric(vv_ratio_mat[i,]),
xlab = "",
ylab = "",
yaxt="n",
xaxt = "n",
type = "b",
col = rainbow(18)[i])
par(new = TRUE)
}
plot(as.numeric(vv_ratio_mat[18,]),
main = "Volume to Volume Ratio Plot",
xlab = "", ylab = "", type = "b", xaxt = "n",
col = rainbow(18)[18])
axis(1, at = 1:5, labels = data$label)
par(new = FALSE)
windows()
for(i in 1:17){
plot(as.numeric(pp_ratio_mat[i,]),
xlab = "",
ylab = "",
yaxt="n",
xaxt = "n",
type = "b",
col = rainbow(18)[i])
par(new = TRUE)
}
plot(as.numeric(pp_ratio_mat[18,]),
main = "Particle to Volume Ratio Plot",
xlab = "", ylab = "", type = "b", xaxt = "n",
col = rainbow(18)[18])
axis(1, at = 1:5, labels = data$label)
par(new = FALSE)
windows()
plot(1:18, 1:18, main = "legend color", cex = 3, pch = 16, col = rainbow(18))
axis(1, at = 1:18, labels = seq(1,18,1))
library(ggplot2)
library(knitr)
library(dplyr)
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
getinto = function(filename){
if(!dir.exists(filename)){
print("The file is not found...")
stop("Wrong directory...")
}else{
setwd(paste(getwd(),"/",filename,sep = ""))
}
}
#Define few places within the repo
wd = get_directory()
setwd(wd)
graphics_wd = paste0(wd, "/barplots")
data_folder_heads = c("m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18")
for(data_folder_head in data_folder_heads){
getinto(data_folder_head)
f = list.files(pattern = "LobesDeposition")
data = read.csv(f)
data$label = c("left", "cranial", "middle", "caudal", "accessory")
data = data[,1:8]
total_volume = sum(data$volume)
vv_ratio = round(data$volume/total_volume,3)
total_particle = sum(data$mean * data$volume)
pp_ratio = round((data$mean * data$volume)/total_particle,3)
ratio = c(vv_ratio, pp_ratio)
#Assign the ratio values to the global env
assign(paste0(data_folder_head, "_ratio"), ratio)
# Legend = c(rep("Volume Ratio", length(vv_ratio)),rep("Particle Ratio", length(pp_ratio)))
#
# ratio_data = data.frame(data$label,ratio, Legend)
#
# ggplot(data = ratio_data, aes(x = data.label, y = ratio, fill = Legend)) +
#   geom_bar(stat="identity", color="black", position = "dodge") +
#   xlab("Lobe Label") +
#   ylab("Relative Ratio") +
#   ggtitle(paste0("Sample ", data_folder_head)) +
#   theme_minimal()
#
# setwd(graphics_wd)
# ggsave(filename = paste0(data_folder_head, ".png"), device = "png")
#
setwd(wd)
# cat(paste0("Plot for ", data_folder_head, " saved..\n"))
#
}
#All the ratios
ratio_list = ls(pattern = "_ratio")[1:18]
ratio_mat = vector()
for(ratio in ratio_list){
ratio_mat = rbind(ratio_mat, get(ratio))
}
ratio_mat = as.data.frame(ratio_mat)
vv_ratio_mat = ratio_mat[1:5]
pp_ratio_mat = ratio_mat[6:10]
kable(vv_ratio_mat)
kable(pp_ratio_mat)
ratio_names = unlist(lapply(strsplit(ratio_list, "[_]"), `[[`, 1))
rownames(vv_ratio_mat) = ratio_names
rownames(pp_ratio_mat) = ratio_names
colnames(vv_ratio_mat) = data$label
colnames(pp_ratio_mat) = data$label
kable(vv_ratio_mat)
kable(pp_ratio_mat)
graphics.off()
windows()
for(i in 1:17){
plot(as.numeric(vv_ratio_mat[i,]),
xlab = "",
ylab = "",
yaxt="n",
xaxt = "n",
type = "b",
col = rainbow(18)[i])
par(new = TRUE)
}
plot(as.numeric(vv_ratio_mat[18,]),
main = "Volume to Volume Ratio Plot",
xlab = "", ylab = "", type = "b", xaxt = "n",
col = rainbow(18)[18])
axis(1, at = 1:5, labels = data$label)
par(new = FALSE)
windows()
for(i in 1:17){
plot(as.numeric(pp_ratio_mat[i,]),
xlab = "",
ylab = "",
yaxt="n",
xaxt = "n",
type = "b",
col = rainbow(18)[i])
par(new = TRUE)
}
plot(as.numeric(pp_ratio_mat[18,]),
main = "Particle to Volume Ratio Plot",
xlab = "", ylab = "", type = "b", xaxt = "n",
col = rainbow(18)[18])
axis(1, at = 1:5, labels = data$label)
par(new = FALSE)
windows()
plot(1:18, 1:18, main = "legend color", cex = 3, pch = 16, col = rainbow(18))
axis(1, at = 1:18, labels = seq(1,18,1))
library(listviewer)
#Glue string vector together as one string
glue = function(string, collapse = ""){
if(length(string) <= 1){
return(string)
}else{
res = character()
for(s in string){
res = paste(res, s, collapse = collapse)
}
return(res)
}
}
get_gender = function(md_file){
a = unlist(strsplit(md_file, "Gender:"))[2]
a = unlist(strsplit(a, "Strain"))[1]
a = unlist(strsplit(a, "[*]"))[1]
a = gsub("[[:space:]]", "", a)
return(a)
}
get_particle_size = function(md_file){
a = unlist(strsplit(md_file, "Particle size:"))[2]
a = unlist(strsplit(a, "micron"))[1]
a = gsub("[[:space:]]", "", a)
try({
a = as.numeric(a)
})
cat("Unit: Microns \n")
return(a)
}
get_exposure_time = function(md_file){
a = unlist(strsplit(md_file, "Exposure time:"))[2]
a = unlist(strsplit(a, "minutes"))[1]
a = gsub("[[:space:]]", "", a)
try({
a = as.numeric(a)
})
cat("Unit: Minutes \n")
return(a)
}
get_voxel_size = function(md_file){
a = unlist(strsplit(md_file, "Voxel size:"))[2]
a = unlist(strsplit(a, "[(microns)]"))[1]
a = gsub("[[:space:]]", "", a)
a = unlist(strsplit(a, "x"))
a = as.numeric(a)
cat("Unit: Microns \n")
return(a)
}
get_overall_quality = function(md_file){
a = unlist(strsplit(md_file, "Overall quality:"))[2]
a = unlist(strsplit(a, "[*]"))[1]
a = gsub("[[:space:]]", "", a)
return(a)
}
get_total_centerline_length = function(md_file){
a = unlist(strsplit(md_file, "Total centerline length:"))[2]
a = unlist(strsplit(a, "mm"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
cat("Unit: mm \n")
return(a)
}
get_number_of_branches = function(md_file){
a = unlist(strsplit(md_file, "Number of branches:"))[2]
a = unlist(strsplit(a, "Number"))[1]
a = unlist(strsplit(a, "[*]"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
return(a)
}
get_number_of_terminal_branches = function(md_file){
a = unlist(strsplit(md_file, "Number of terminal branches:"))[2]
a = unlist(strsplit(a, "Maximum"))[1]
a = unlist(strsplit(a, "[*]"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
return(a)
}
get_maximum_generation_number = function(md_file){
a = unlist(strsplit(md_file, "Maximum generation number:"))[2]
a = unlist(strsplit(a, "Number"))[1]
a = unlist(strsplit(a, "[*]"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
return(a)
}
get_number_of_outlet_areas = function(md_file){
a = unlist(strsplit(md_file, "Number of outlet areas:"))[2]
a = unlist(strsplit(a, "[#]"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
return(a)
}
get_lung_volume = function(md_file){
a = unlist(strsplit(md_file, "Lung volume:"))[2]
a = unlist(strsplit(a, "[(mm^3)]"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
cat("Unit: (mm^3) \n")
return(a)
}
get_total_aerosol_deposition = function(md_file){
a = unlist(strsplit(md_file, "Total aerosol deposition:"))[2]
a = unlist(strsplit(a, "Compartments"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
cat("Unit: FMS \n")
return(a)
}
get_relative_exposure_estimate = function(md_file){
a = unlist(strsplit(md_file, "Relative exposure estimate:"))[2]
a = unlist(strsplit(a, "FMS"))[1]
a = gsub("[[:space:]]", "", a)
a = as.numeric(a)
return(a)
}
#Set the wd to where md files are stored
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
setwd(get_directory())
filelist = list.files(pattern = "txt")
file_name = character()
n = 1
for(i in filelist){
file_name[n] = unlist(strsplit(i, "_"))[1]
n = n + 1
}
n = 1
for(f in filelist){
md_file = readLines(f)
md_file = glue(md_file)
l = list(
"gender" = get_gender(md_file = md_file),
"particle_size" = get_particle_size(md_file = md_file),
"exposure_time" = get_exposure_time(md_file = md_file),
"voxel_size" = get_voxel_size(md_file = md_file),
"overall_quality" = get_overall_quality(md_file = md_file),
"total_centerline_length" = get_total_centerline_length(md_file = md_file),
"number_of_branches" = get_number_of_branches(md_file = md_file),
"number_of_terminal_branches" = get_number_of_terminal_branches(md_file = md_file),
"maximum_generation_number" = get_maximum_generation_number(md_file = md_file),
"number_of_outlet_areas" = get_number_of_outlet_areas(md_file = md_file),
"lung_volume" = get_lung_volume(md_file = md_file),
"total_aerosol_deposition" = get_total_aerosol_deposition(md_file = md_file),
"relative_exposure_estimate" = get_relative_exposure_estimate(md_file = md_file)
)
assign(file_name[n], l)
n = n + 1
}
rm(l,i,n,f,md_file, file_name,filelist)
# get_gender(md_file = md_file)
# get_particle_size(md_file = md_file)
# get_exposure_time(md_file = md_file)
# get_voxel_size(md_file = md_file)
# get_overall_quality(md_file = md_file)
# get_total_centerline_length(md_file = md_file)
# get_number_of_branches(md_file = md_file)
# get_number_of_terminal_branches(md_file = md_file)
# get_maximum_generation_number(md_file = md_file)
# get_number_of_outlet_areas(md_file = md_file)
# get_lung_volume(md_file = md_file)
# get_total_aerosol_deposition(md_file = md_file)
# get_relative_exposure_estimate(md_file = md_file)
#Example of viewing a json file
jsonedit(m01)
