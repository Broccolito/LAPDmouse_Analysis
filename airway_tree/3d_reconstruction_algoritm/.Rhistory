library(rgl)
heat.colors(1)
heat.colors(0)
heat.colors(10)
barplot(c(2,5), col=c("chartreuse", "blue4"))
barplot(c(2,5), col=c("chartreuse", heat.colors(1)))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[1]))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[2]))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[3]))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[4]))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[5]))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[10]))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[9]))
barplot(c(2,5), col=c("chartreuse", heat.colors(10)[8]))
for(i in 1:100){barplot(c(2,5), col=c("chartreuse", heat.colors(100)[i]))}
for(i in 1:100){barplot(c(2,5), col=c("chartreuse", heat.colors(100)[i])); Sys.sleep(0.1)}
for(i in 1:100){barplot(c(2,5), col=c("chartreuse", heat.colors(100)[i])); Sys.sleep(0.1);windows()}
graphics.off()
for(i in 1:100){graphics.off();barplot(c(2,5), col=c("chartreuse", heat.colors(100)[i])); Sys.sleep(0.1);windows()}
for(i in 1:100){windows();barplot(c(2,5), col=c("chartreuse", heat.colors(100)[i])); Sys.sleep(0.1);graphics.off()}
for(i in 1:100){windows();barplot(c(2,5), col=c("chartreuse", heat.colors(100)[i])); Sys.sleep(0.2);graphics.off()}
for(i in 1:100){windows();barplot(c(2,5), col=c(rainbow(100)[i], heat.colors(100)[i])); Sys.sleep(0.2);graphics.off()}
for(i in 1:100){;barplot(c(2,5), col=c(rainbow(100)[i], heat.colors(100)[i])); Sys.sleep(0.2);graphics.off()}
if(!require("rgl")){
install.packages("rgl")
library("rgl")
}
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
wd = get_directory()
setwd(wd)
#Read the data
airway_data = read.csv(file = "m01_AirwayTreeTable.csv")
lobe_depo = read.csv("m01_LobesDeposition.csv")
sublobe_depo = read.csv("m01_SublobesDeposition.csv")
acini_depo = read.csv("m01_NearAciniDeposition.csv")
data_dimension = dim(airway_data)[1]
try({
rgl.close()
}, silent = TRUE)
open3d()
for(i in 1:data_dimension){
data = airway_data[i,]
airway = cylinder3d(
center = cbind(c(data$centroidX + 0.5 * data$length * data$directionX,
data$centroidX - 0.5 * data$length * data$directionX),
c(data$centroidY + 0.5 * data$length * data$directionY,
data$centroidY - 0.5 * data$length * data$directionY),
c(data$centroidZ + 0.5 * data$length * data$directionZ,
data$centroidZ - 0.5 * data$length * data$directionZ)),
radius = data$radius
)
#shade3d(addNormals(subdivision3d(airway, depth = 0)), col = rainbow(data_dimension)[i])
shade3d(addNormals(subdivision3d(airway, depth = 0)), col = "grey")
}
############### Deposition
color_gradient = heat.colors(ceiling(max(lobe_depo$volume * lobe_depo$mean)))
for(j in 1:dim(lobe_depo)[1]){
data = lobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 1.5,
color = color_gradient[round(lobe_depo$volume[j] * lobe_depo$mean[j])])
}
color_gradient = heat.colors(ceiling(max(sublobe_depo$volume * sublobe_depo$mean)))
for(j in 1:dim(sublobe_depo)[1]){
data = sublobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 0.5,
color = color_gradient[round(sublobe_depo$volume[j] * sublobe_depo$mean[j])])
}
color_gradient = heat.colors(ceiling(max(acini_depo$volume * acini_depo$mean)))
for(j in 1:dim(acini_depo)[1]){
data = acini_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 0.15,
color = color_gradient[round(acini_depo$volume[j] * acini_depo$mean[j])])
}
sum(lobe_depo$volume * lobe_depo$mean)
(lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean)
round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0)
sum(round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0))
color_gradient = heat.colors(sum(round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0)))
length(color_gradient)
1:dim(lobe_depo)[1]
lobe_depo_percentage[5]
lobe_depo_percentage = round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0)
lobe_depo_percentage[5]
lobe_depo_percentage
if(!require("rgl")){
install.packages("rgl")
library("rgl")
}
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
wd = get_directory()
setwd(wd)
#Read the data
airway_data = read.csv(file = "m01_AirwayTreeTable.csv")
lobe_depo = read.csv("m01_LobesDeposition.csv")
sublobe_depo = read.csv("m01_SublobesDeposition.csv")
acini_depo = read.csv("m01_NearAciniDeposition.csv")
data_dimension = dim(airway_data)[1]
try({
rgl.close()
}, silent = TRUE)
open3d()
for(i in 1:data_dimension){
data = airway_data[i,]
airway = cylinder3d(
center = cbind(c(data$centroidX + 0.5 * data$length * data$directionX,
data$centroidX - 0.5 * data$length * data$directionX),
c(data$centroidY + 0.5 * data$length * data$directionY,
data$centroidY - 0.5 * data$length * data$directionY),
c(data$centroidZ + 0.5 * data$length * data$directionZ,
data$centroidZ - 0.5 * data$length * data$directionZ)),
radius = data$radius
)
#shade3d(addNormals(subdivision3d(airway, depth = 0)), col = rainbow(data_dimension)[i])
shade3d(addNormals(subdivision3d(airway, depth = 0)), col = "grey")
}
############### Deposition ###############
# The numbers should be normalized based on percentage
lobe_depo_percentage = round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0)
# Sometimes when rounded, the value can be 101 instead of 100
color_gradient = heat.colors(sum(lobe_depo_percentage))
for(j in 1:dim(lobe_depo)[1]){
data = lobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 1.5,
color = color_gradient[lobe_depo_percentage[j]])
}
# color_gradient = heat.colors(ceiling(max(sublobe_depo$volume * sublobe_depo$mean)))
# for(j in 1:dim(sublobe_depo)[1]){
#
#   data = sublobe_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.5,
#               color = color_gradient[round(sublobe_depo$volume[j] * sublobe_depo$mean[j])])
#
# }
#
# color_gradient = heat.colors(ceiling(max(acini_depo$volume * acini_depo$mean)))
# for(j in 1:dim(acini_depo)[1]){
#
#   data = acini_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.15,
#               color = color_gradient[round(acini_depo$volume[j] * acini_depo$mean[j])])
#
# }
rm(list = ls)
rm(list = ls())
q()
