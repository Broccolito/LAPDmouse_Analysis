wd = get_directory()
setwd(wd)
#Read the data
airway_data = read.csv(file = "m01_AirwayTreeTable.csv")
lobe_depo = read.csv("m01_LobesDeposition.csv")
sublobe_depo = read.csv("m01_SublobesDeposition.csv")
acini_depo = read.csv("m01_NearAciniDeposition.csv")
data_dimension = dim(airway_data)[1]
try({
rgl.close()
}, silent = TRUE)
open3d()
for(i in 1:data_dimension){
data = airway_data[i,]
airway = cylinder3d(
center = cbind(c(data$centroidX + 0.5 * data$length * data$directionX,
data$centroidX - 0.5 * data$length * data$directionX),
c(data$centroidY + 0.5 * data$length * data$directionY,
data$centroidY - 0.5 * data$length * data$directionY),
c(data$centroidZ + 0.5 * data$length * data$directionZ,
data$centroidZ - 0.5 * data$length * data$directionZ)),
radius = data$radius
)
#shade3d(addNormals(subdivision3d(airway, depth = 0)), col = rainbow(data_dimension)[i])
shade3d(addNormals(subdivision3d(airway, depth = 0)), col = "grey")
}
############### Deposition ###############
#Initialize color gradient
color_gradient = heat.colors(100)
## This normalization process can only be done (well, sort of) to the lober level
# The numbers should be normalized based on percentage
# Add 1 at the bottom because index number starts from 1 in R
lobe_depo_percentage = round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0) + 1
lobe_depo_percentage[lobe_depo_percentage >= 100] = 100 #Cape the maximum to 100
# color_gradient = heat.colors(ceiling(max(lobe_depo$volume * lobe_depo$mean))) #What it originally looks like
for(j in 1:dim(lobe_depo)[1]){
data = lobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 1.5,
color = color_gradient[lobe_depo_percentage[j]])
# color = color_gradient[round(lobe_depo$volume[j] * lobe_depo$mean[j])]) #What it originally looks like
}
sublobe_depo_percentage = round((sublobe_depo$volume * sublobe_depo$mean) /
sum(sublobe_depo$volume * sublobe_depo$mean) * 100, 3)
#Normalize the colorscale by the compartment count
sublobe_depo_percentage = (dim(sublobe_depo)[1] / dim(lobe_depo)[1]) * sublobe_depo_percentage + 1
sublobe_depo_percentage[sublobe_depo_percentage >= 100] = 100
sublobe_depo_percentage = round(sublobe_depo_percentage, 0)
# color_gradient = heat.colors(ceiling(max(sublobe_depo$volume * sublobe_depo$mean))) #Original
for(j in 1:dim(sublobe_depo)[1]){
data = sublobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 0.5,
color = color_gradient[sublobe_depo_percentage[j]])
}
acini_depo_percentage = round((acini_depo$volume * acini_depo$mean) /
sum(acini_depo$volume * acini_depo$mean) * 100, 4)
#Normalize the colorscale by the compartment count
acini_depo_percentage = (dim(acini_depo)[1] / dim(lobe_depo)[1]) * acini_depo_percentage + 1
acini_depo_percentage[acini_depo_percentage >= 100] = 100
acini_depo_percentage = round(acini_depo_percentage, 0)
# color_gradient = heat.colors(ceiling(max(acini_depo$volume * acini_depo$mean))) #Original
for(j in 1:dim(acini_depo)[1]){
data = acini_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 0.15,
color = color_gradient[acini_depo_percentage[j]])
}
if(!require("rgl")){
install.packages("rgl")
library("rgl")
}
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
wd = get_directory()
setwd(wd)
#Read the data
airway_data = read.csv(file = "m01_AirwayTreeTable.csv")
lobe_depo = read.csv("m01_LobesDeposition.csv")
sublobe_depo = read.csv("m01_SublobesDeposition.csv")
acini_depo = read.csv("m01_NearAciniDeposition.csv")
data_dimension = dim(airway_data)[1]
try({
rgl.close()
}, silent = TRUE)
open3d()
for(i in 1:data_dimension){
data = airway_data[i,]
airway = cylinder3d(
center = cbind(c(data$centroidX + 0.5 * data$length * data$directionX,
data$centroidX - 0.5 * data$length * data$directionX),
c(data$centroidY + 0.5 * data$length * data$directionY,
data$centroidY - 0.5 * data$length * data$directionY),
c(data$centroidZ + 0.5 * data$length * data$directionZ,
data$centroidZ - 0.5 * data$length * data$directionZ)),
radius = data$radius
)
#shade3d(addNormals(subdivision3d(airway, depth = 0)), col = rainbow(data_dimension)[i])
shade3d(addNormals(subdivision3d(airway, depth = 0)), col = "grey")
}
############### Deposition ###############
#Initialize color gradient
color_gradient = heat.colors(100)
## This normalization process can only be done (well, sort of) to the lober level
# The numbers should be normalized based on percentage
# Add 1 at the bottom because index number starts from 1 in R
lobe_depo_percentage = round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0) + 1
lobe_depo_percentage[lobe_depo_percentage >= 100] = 100 #Cape the maximum to 100
# color_gradient = heat.colors(ceiling(max(lobe_depo$volume * lobe_depo$mean))) #What it originally looks like
for(j in 1:dim(lobe_depo)[1]){
data = lobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 1.5,
color = color_gradient[lobe_depo_percentage[j]])
# color = color_gradient[round(lobe_depo$volume[j] * lobe_depo$mean[j])]) #What it originally looks like
}
# sublobe_depo_percentage = round((sublobe_depo$volume * sublobe_depo$mean) /
#                                   sum(sublobe_depo$volume * sublobe_depo$mean) * 100, 3)
#
# #Normalize the colorscale by the compartment count
# sublobe_depo_percentage = (dim(sublobe_depo)[1] / dim(lobe_depo)[1]) * sublobe_depo_percentage + 1
# sublobe_depo_percentage[sublobe_depo_percentage >= 100] = 100
# sublobe_depo_percentage = round(sublobe_depo_percentage, 0)
# # color_gradient = heat.colors(ceiling(max(sublobe_depo$volume * sublobe_depo$mean))) #Original
# for(j in 1:dim(sublobe_depo)[1]){
#
#   data = sublobe_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.5,
#               color = color_gradient[sublobe_depo_percentage[j]])
#
# }
#
# acini_depo_percentage = round((acini_depo$volume * acini_depo$mean) /
#                                   sum(acini_depo$volume * acini_depo$mean) * 100, 4)
#
# #Normalize the colorscale by the compartment count
# acini_depo_percentage = (dim(acini_depo)[1] / dim(lobe_depo)[1]) * acini_depo_percentage + 1
# acini_depo_percentage[acini_depo_percentage >= 100] = 100
# acini_depo_percentage = round(acini_depo_percentage, 0)
#
# # color_gradient = heat.colors(ceiling(max(acini_depo$volume * acini_depo$mean))) #Original
# for(j in 1:dim(acini_depo)[1]){
#
#   data = acini_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.15,
#               color = color_gradient[acini_depo_percentage[j]])
#
# }
if(!require("rgl")){
install.packages("rgl")
library("rgl")
}
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
wd = get_directory()
setwd(wd)
#Read the data
airway_data = read.csv(file = "m01_AirwayTreeTable.csv")
lobe_depo = read.csv("m01_LobesDeposition.csv")
sublobe_depo = read.csv("m01_SublobesDeposition.csv")
acini_depo = read.csv("m01_NearAciniDeposition.csv")
data_dimension = dim(airway_data)[1]
try({
rgl.close()
}, silent = TRUE)
open3d()
for(i in 1:data_dimension){
data = airway_data[i,]
airway = cylinder3d(
center = cbind(c(data$centroidX + 0.5 * data$length * data$directionX,
data$centroidX - 0.5 * data$length * data$directionX),
c(data$centroidY + 0.5 * data$length * data$directionY,
data$centroidY - 0.5 * data$length * data$directionY),
c(data$centroidZ + 0.5 * data$length * data$directionZ,
data$centroidZ - 0.5 * data$length * data$directionZ)),
radius = data$radius
)
#shade3d(addNormals(subdivision3d(airway, depth = 0)), col = rainbow(data_dimension)[i])
shade3d(addNormals(subdivision3d(airway, depth = 0)), col = "grey")
}
############### Deposition ###############
#Initialize color gradient
color_gradient = rainbow(100)
## This normalization process can only be done (well, sort of) to the lober level
# The numbers should be normalized based on percentage
# Add 1 at the bottom because index number starts from 1 in R
lobe_depo_percentage = round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0) + 1
lobe_depo_percentage[lobe_depo_percentage >= 100] = 100 #Cape the maximum to 100
# color_gradient = heat.colors(ceiling(max(lobe_depo$volume * lobe_depo$mean))) #What it originally looks like
for(j in 1:dim(lobe_depo)[1]){
data = lobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 1.5,
color = color_gradient[lobe_depo_percentage[j]])
# color = color_gradient[round(lobe_depo$volume[j] * lobe_depo$mean[j])]) #What it originally looks like
}
# sublobe_depo_percentage = round((sublobe_depo$volume * sublobe_depo$mean) /
#                                   sum(sublobe_depo$volume * sublobe_depo$mean) * 100, 3)
#
# #Normalize the colorscale by the compartment count
# sublobe_depo_percentage = (dim(sublobe_depo)[1] / dim(lobe_depo)[1]) * sublobe_depo_percentage + 1
# sublobe_depo_percentage[sublobe_depo_percentage >= 100] = 100
# sublobe_depo_percentage = round(sublobe_depo_percentage, 0)
# # color_gradient = heat.colors(ceiling(max(sublobe_depo$volume * sublobe_depo$mean))) #Original
# for(j in 1:dim(sublobe_depo)[1]){
#
#   data = sublobe_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.5,
#               color = color_gradient[sublobe_depo_percentage[j]])
#
# }
#
# acini_depo_percentage = round((acini_depo$volume * acini_depo$mean) /
#                                   sum(acini_depo$volume * acini_depo$mean) * 100, 4)
#
# #Normalize the colorscale by the compartment count
# acini_depo_percentage = (dim(acini_depo)[1] / dim(lobe_depo)[1]) * acini_depo_percentage + 1
# acini_depo_percentage[acini_depo_percentage >= 100] = 100
# acini_depo_percentage = round(acini_depo_percentage, 0)
#
# # color_gradient = heat.colors(ceiling(max(acini_depo$volume * acini_depo$mean))) #Original
# for(j in 1:dim(acini_depo)[1]){
#
#   data = acini_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.15,
#               color = color_gradient[acini_depo_percentage[j]])
#
# }
install.packages("viridis")
library(viridis)
viridis.map
dim(viridis.map)
viridisLite::cividis(100)
if(!require("rgl")){
install.packages("rgl")
library("rgl")
}
if(!require("viridisLite")){
install.packages("viridisLite")
library("viridisLite")
}
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
wd = get_directory()
setwd(wd)
#Read the data
airway_data = read.csv(file = "m01_AirwayTreeTable.csv")
lobe_depo = read.csv("m01_LobesDeposition.csv")
sublobe_depo = read.csv("m01_SublobesDeposition.csv")
acini_depo = read.csv("m01_NearAciniDeposition.csv")
data_dimension = dim(airway_data)[1]
try({
rgl.close()
}, silent = TRUE)
open3d()
for(i in 1:data_dimension){
data = airway_data[i,]
airway = cylinder3d(
center = cbind(c(data$centroidX + 0.5 * data$length * data$directionX,
data$centroidX - 0.5 * data$length * data$directionX),
c(data$centroidY + 0.5 * data$length * data$directionY,
data$centroidY - 0.5 * data$length * data$directionY),
c(data$centroidZ + 0.5 * data$length * data$directionZ,
data$centroidZ - 0.5 * data$length * data$directionZ)),
radius = data$radius
)
#shade3d(addNormals(subdivision3d(airway, depth = 0)), col = rainbow(data_dimension)[i])
shade3d(addNormals(subdivision3d(airway, depth = 0)), col = "grey")
}
############### Deposition ###############
#Initialize color gradient
color_gradient = cividis(100)
## This normalization process can only be done (well, sort of) to the lober level
# The numbers should be normalized based on percentage
# Add 1 at the bottom because index number starts from 1 in R
lobe_depo_percentage = round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0) + 1
lobe_depo_percentage[lobe_depo_percentage >= 100] = 100 #Cape the maximum to 100
# color_gradient = heat.colors(ceiling(max(lobe_depo$volume * lobe_depo$mean))) #What it originally looks like
for(j in 1:dim(lobe_depo)[1]){
data = lobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 1.5,
color = color_gradient[lobe_depo_percentage[j]])
# color = color_gradient[round(lobe_depo$volume[j] * lobe_depo$mean[j])]) #What it originally looks like
}
# sublobe_depo_percentage = round((sublobe_depo$volume * sublobe_depo$mean) /
#                                   sum(sublobe_depo$volume * sublobe_depo$mean) * 100, 3)
#
# #Normalize the colorscale by the compartment count
# sublobe_depo_percentage = (dim(sublobe_depo)[1] / dim(lobe_depo)[1]) * sublobe_depo_percentage + 1
# sublobe_depo_percentage[sublobe_depo_percentage >= 100] = 100
# sublobe_depo_percentage = round(sublobe_depo_percentage, 0)
# # color_gradient = heat.colors(ceiling(max(sublobe_depo$volume * sublobe_depo$mean))) #Original
# for(j in 1:dim(sublobe_depo)[1]){
#
#   data = sublobe_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.5,
#               color = color_gradient[sublobe_depo_percentage[j]])
#
# }
#
# acini_depo_percentage = round((acini_depo$volume * acini_depo$mean) /
#                                   sum(acini_depo$volume * acini_depo$mean) * 100, 4)
#
# #Normalize the colorscale by the compartment count
# acini_depo_percentage = (dim(acini_depo)[1] / dim(lobe_depo)[1]) * acini_depo_percentage + 1
# acini_depo_percentage[acini_depo_percentage >= 100] = 100
# acini_depo_percentage = round(acini_depo_percentage, 0)
#
# # color_gradient = heat.colors(ceiling(max(acini_depo$volume * acini_depo$mean))) #Original
# for(j in 1:dim(acini_depo)[1]){
#
#   data = acini_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.15,
#               color = color_gradient[acini_depo_percentage[j]])
#
# }
cividis(100)
plot(1:100, col = cividis(100))
plot(1:100, col = cividis(100), pch = 16)
plot(1:1000, col = cividis(1000), pch = 16)
graphics.off()
rgl.close()
rm(list = ls())
magma(100)
if(!require("rgl")){
install.packages("rgl")
library("rgl")
}
if(!require("viridisLite")){
install.packages("viridisLite")
library("viridisLite")
}
get_directory = function(){
args <- commandArgs(trailingOnly = FALSE)
file <- "--file="
rstudio <- "RStudio"
match <- grep(rstudio, args)
if(length(match) > 0){
return(dirname(rstudioapi::getSourceEditorContext()$path))
}else{
match <- grep(file, args)
if (length(match) > 0) {
return(dirname(normalizePath(sub(file, "", args[match]))))
}else{
return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
}
}
}
wd = get_directory()
setwd(wd)
#Read the data
airway_data = read.csv(file = "m01_AirwayTreeTable.csv")
lobe_depo = read.csv("m01_LobesDeposition.csv")
sublobe_depo = read.csv("m01_SublobesDeposition.csv")
acini_depo = read.csv("m01_NearAciniDeposition.csv")
data_dimension = dim(airway_data)[1]
try({
rgl.close()
}, silent = TRUE)
open3d()
# for(i in 1:data_dimension){
#
#   data = airway_data[i,]
#   airway = cylinder3d(
#     center = cbind(c(data$centroidX + 0.5 * data$length * data$directionX,
#                      data$centroidX - 0.5 * data$length * data$directionX),
#                    c(data$centroidY + 0.5 * data$length * data$directionY,
#                      data$centroidY - 0.5 * data$length * data$directionY),
#                    c(data$centroidZ + 0.5 * data$length * data$directionZ,
#                      data$centroidZ - 0.5 * data$length * data$directionZ)),
#     radius = data$radius
#
#   )
#   #shade3d(addNormals(subdivision3d(airway, depth = 0)), col = rainbow(data_dimension)[i])
#   shade3d(addNormals(subdivision3d(airway, depth = 0)), col = "grey")
#
# }
############### Deposition ###############
#Initialize color gradient
#Rainbow
#Cividis
#Heat map
color_gradient = magma(100)
## This normalization process can only be done (well, sort of) to the lober level
# The numbers should be normalized based on percentage
# Add 1 at the bottom because index number starts from 1 in R
lobe_depo_percentage = round((lobe_depo$volume * lobe_depo$mean) / sum(lobe_depo$volume * lobe_depo$mean) * 100, 0) + 1
lobe_depo_percentage[lobe_depo_percentage >= 100] = 100 #Cape the maximum to 100
# color_gradient = heat.colors(ceiling(max(lobe_depo$volume * lobe_depo$mean))) #What it originally looks like
for(j in 1:dim(lobe_depo)[1]){
data = lobe_depo[j,]
rgl.spheres(x = data$centroidX,
y = data$centroidY,
z = data$centroidZ,
r = 1.5,
color = color_gradient[lobe_depo_percentage[j]])
# color = color_gradient[round(lobe_depo$volume[j] * lobe_depo$mean[j])]) #What it originally looks like
}
############### Currently not working on the sublobe ###############
############### Currently not working on the acini ###############
# sublobe_depo_percentage = round((sublobe_depo$volume * sublobe_depo$mean) /
#                                   sum(sublobe_depo$volume * sublobe_depo$mean) * 100, 3)
#
# #Normalize the colorscale by the compartment count
# sublobe_depo_percentage = (dim(sublobe_depo)[1] / dim(lobe_depo)[1]) * sublobe_depo_percentage + 1
# sublobe_depo_percentage[sublobe_depo_percentage >= 100] = 100
# sublobe_depo_percentage = round(sublobe_depo_percentage, 0)
# # color_gradient = heat.colors(ceiling(max(sublobe_depo$volume * sublobe_depo$mean))) #Original
# for(j in 1:dim(sublobe_depo)[1]){
#
#   data = sublobe_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.5,
#               color = color_gradient[sublobe_depo_percentage[j]])
#
# }
#
# acini_depo_percentage = round((acini_depo$volume * acini_depo$mean) /
#                                   sum(acini_depo$volume * acini_depo$mean) * 100, 4)
#
# #Normalize the colorscale by the compartment count
# acini_depo_percentage = (dim(acini_depo)[1] / dim(lobe_depo)[1]) * acini_depo_percentage + 1
# acini_depo_percentage[acini_depo_percentage >= 100] = 100
# acini_depo_percentage = round(acini_depo_percentage, 0)
#
# # color_gradient = heat.colors(ceiling(max(acini_depo$volume * acini_depo$mean))) #Original
# for(j in 1:dim(acini_depo)[1]){
#
#   data = acini_depo[j,]
#   rgl.spheres(x = data$centroidX,
#               y = data$centroidY,
#               z = data$centroidZ,
#               r = 0.15,
#               color = color_gradient[acini_depo_percentage[j]])
#
# }
q()
