license()
RShowDoc("LGPL-3")
shiny::runApp('C:/Users/wanju/Desktop/multiwindow')
runApp('C:/Users/wanju/Desktop/multiwindow')
?observeEvent
## App 2: Using `once`
shinyApp(
ui = basicPage( actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
print(paste("This will only be printed once; all",
"subsequent button clicks won't do anything"))
}, once = TRUE)
}
)
## App 2: Using `once`
shinyApp(
ui = basicPage( actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
print(paste("This will only be printed once; all",
"subsequent button clicks won't do anything"))
}, once = TRUE)
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
insertUI("#go", "afterEnd",
actionButton("dynamic", "click to remove"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
observeEvent(input$go, {
insertUI("#go", "afterEnd",
actionButton("dynamic", "click to remove"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
input$go
inputPanel()
?removeUI()
?observeEvent()
uiOutput("happy")
removeUI
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
output$wow = renderUI({
actionButton("action1")
})
observeEvent(input$go, {
insertUI("#go", "afterEnd",
uiOutput("wow"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
output$wow = renderUI({
actionButton("action1", "dynamic")
})
observeEvent(input$go, {
insertUI("#go", "afterEnd",
uiOutput("wow"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(actionButton("go", "Go")),
server = function(input, output, session) {
output$wow = renderUI({
actionButton("dynamic", "action1")
})
observeEvent(input$go, {
insertUI("#go", "afterEnd",
uiOutput("wow"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(uiOutput("firstUI")),
server = function(input, output, session) {
output$firstUI = renderUI({
actionButton("go", "Go!")
})
output$wow = renderUI({
actionButton("dynamic", "action1")
})
observeEvent(input$go, {
insertUI("#go", "afterEnd",
uiOutput("wow"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(uiOutput("firstUI")),
server = function(input, output, session) {
output$firstUI = renderUI({
actionButton("go", "Go!")
})
output$wow = renderUI({
actionButton("dynamic", "action1")
})
observeEvent(input$go, {
insertUI("#go", "afterEnd",
uiOutput("wow"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
## App 3: Using `ignoreInit` and `once`
shinyApp(
ui = basicPage(uiOutput("firstUI")),
server = function(input, output, session) {
output$firstUI = renderUI({
actionButton("go", "Go!")
})
output$wow = renderUI({
actionButton("dynamic", "action1")
})
observeEvent(input$go, {
insertUI("#go", "afterEnd",
uiOutput("wow"))
# set up an observer that depends on the dynamic
# input, so that it doesn't run when the input is
# created, and only runs once after that (since
# the side effect is remove the input from the DOM)
observeEvent(input$dynamic, {
removeUI("#dynamic")
removeUI("#go")
}, ignoreInit = TRUE, once = TRUE)
})
}
)
